version: 2.1

commands:
  destroy-environment:
    description: Destroy environment.
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws eks update-kubeconfig --name "geolocator-${CIRCLE_WORKFLOW_ID}"
            export KUBECONFIG=/root/.kube/config
            eksctl delete cluster --name="geolocator-${CIRCLE_WORKFLOW_ID}"
jobs:
  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ linting ]
      - run:
          name: lint code
          command: |
            npm i
            npm install eslint 
            npm run lint
      - save_cache:
          paths: [ node_modules ]
          key: linting
  
  build-push:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          name: build docker image
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t "heshamraafat/geolocator" .
      - run:
          name: push docker image to repo
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker push "heshamraafat/geolocator"
  
  create-cluster:
    docker:
      - image: alpine/k8s:1.21.2
    working_directory: /tmp/workspace
    steps:
      - checkout      
      - run:
          name: get old cluster
          command: |
            OLD_CLUSTER=$(aws eks list-clusters --query 'clusters[0]' --output text)
            curl -H "Content-Type: text/plain" -H "token: 5fbf7510-0c03-4949-bd13-99cbc47e5be3" --request PUT --data ${OLD_CLUSTER} https://api.memstash.io/values/old
      - run:
          name: create kubernetes cluster
          command: |
            eksctl create cluster --name="geolocator-${CIRCLE_WORKFLOW_ID}" \
            --nodes-min=1 --nodes-max=2 \
            --node-type=t2.micro \
            --zones=us-east-1a,us-east-1b
      - run:
          name: create kubernetes deployment and service
          command: |
            aws eks update-kubeconfig --name "geolocator-${CIRCLE_WORKFLOW_ID}"
            export KUBECONFIG=/root/.kube/config
            kubectl create secret docker-registry regcred --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASS --docker-email=hesham.raafat@hotmail.com
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
      - run:
          name: save service ip/url
          command: |
            URL=$(kubectl get services geolocator-service --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            curl -H "Content-Type: text/plain" -H "token: 5fbf7510-0c03-4949-bd13-99cbc47e5be3" --request PUT --data "http://${URL}:8080" https://api.memstash.io/values/url
  
  smoke-test:
    docker:
      - image: alpine/k8s:1.21.2
    working_directory: /tmp/workspace
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: smoke test
          command: |
            URL=$(curl -s -H "token: 5fbf7510-0c03-4949-bd13-99cbc47e5be3" --request GET https://api.memstash.io/values/url)
            if curl -s ${URL} | grep "address"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment

  update-cleanup:
    docker:
      - image: alpine/k8s:1.21.2
    steps:
      - run:
          name: remove old cluster
          command: |
            aws eks update-kubeconfig --name "geolocator-${CIRCLE_WORKFLOW_ID}"
            export KUBECONFIG=/root/.kube/config
            cluster_name=$(curl -s -H "token: 5fbf7510-0c03-4949-bd13-99cbc47e5be3" --request GET https://api.memstash.io/values/old)
            eksctl delete cluster --name=$cluster_name
            
workflows:
  default:
    jobs:
      - lint
      - build-push:
          requires: [ lint ]      
      - create-cluster:
          requires: [ build-push ]
      - smoke-test:
          requires: [ create-cluster ]
      - update-cleanup:
          requires: [ smoke-test ]
